# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# GraphQL types: https://docs.aws.amazon.com/appsync/latest/devguide/graphql-types.html

# Directives: https://docs.amplify.aws/javascript/tools/cli/graphqlapi/directives-reference/

# https://docs.amplify.aws/javascript/build-a-backend/graphqlapi/data-modeling/
#
# > The @hasOne and @hasMany directives do not support referencing a model which then references
# > the initial model via @hasOne or @hasMany if DataStore is enabled.
#
# Use @belongsTo, see https://github.com/aws-amplify/amplify-studio/issues/388

# Auto-generate IDs: https://egghead.io/lessons/graphql-autogenerate-an-id-field-in-graphql-with-appsync-resolvers

# Backfill (reindex) after adding a new @searchable or any @index (GSI) with 2 or more sort keys:
#   https://docs.amplify.aws/javascript/build-a-backend/graphqlapi/troubleshooting/
# This indicates that backfilling is performed automatically for @index with 0 or 1 sort keys:
#   https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html
# How to backfill new AppSync fields using AWS Amplify - https://stackoverflow.com/questions/58918941/how-to-backfill-new-appsync-fields-using-aws-amplify

# updatedAt - past confusion using updatedAt as a sort key:
#   https://github.com/aws-amplify/amplify-cli/issues/401
#   https://github.com/aws-amplify/amplify-category-api/issues/480
# and protecing it from being settable by the client:
#   https://github.com/aws-amplify/amplify-cli/issues/401#issuecomment-630402893
#   https://docs.amplify.aws/javascript/tools/cli-legacy/auth-directive/#definition
# Current docs - note createdAt/updatedAt type is String, not AWSDateTime:
#   https://docs.amplify.aws/javascript/build-a-backend/graphqlapi/best-practice/query-with-sorting/

type Factory @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String
  url: AWSURL
  products: [Product] @hasMany(indexName: "byFactory", fields: ["id"])
}

type Category @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
    @index(name: "getCategoryByName", queryField: "getCategoryByName")
  products: [Product] @manyToMany(relationName: "ProductCategories")
  industries: [Industry] @manyToMany(relationName: "IndustryCategories")
  type: String
    @default(value: "Category")
    @index(
      name: "listCategoriesByName",
      queryField: "listCategoriesByName"
      sortKeyFields: ["name"]
    )
}

enum ProductStatusEnum {
  unavailable
  available
}

type Product @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String
  msrp: Float
  price: Float
  sku: String
  description: String
#  available: Boolean
  status: ProductStatusEnum
  media: [String]
  item_weight_net: Float
  item_weight_gross: Float
  item_size_width: Float
  item_size_depth: Float
  item_size_height: Float
  package_weight_net: Float
  package_weight_gross: Float
  package_size_width: Float
  package_size_depth: Float
  package_size_height: Float
  items_per_package: Int
  categories: [Category] @manyToMany(relationName: "ProductCategories")
  factory_id: ID @index(name: "byFactory")
  factory: Factory @belongsTo(fields: ["factory_id"])
  type: String
    @default(value: "Product")
#    @index(
#      name: "listProductsByNameByStatus",
#      queryField: "listProductsByNameByStatus"
#      sortKeyFields: ["name", "status"]
#    )
#    @index(
#     name: "listProductsByUpdatedAtByStatus",
#     queryField: "listProductsByUpdatedAtByStatus"
#     sortKeyFields: ["updatedAt", "status"]
#   )
#  updatedAt: String!
#    @auth(rules: [{ allow: groups, groups: ["ForbiddenGroup"], operations: [] }])
}

type Package @model @auth(rules: [{ allow: private }]) {
  id: ID!
  product: Product @hasOne
  #shipment: Shipment
  weight_net: Float
  weight_gross: Float
  size_width: Float
  size_depth: Float
  size_height: Float
}

type Shipment @model @auth(rules: [{ allow: private }]) {
  id: ID!
  packages: [Package] @hasMany
  departure: AWSDateTime
  arrival: AWSDateTime
}

#type PurchaseStatus @model @auth(rules: [{ allow: private }]) {
#}

type Purchase @model @auth(rules: [{ allow: private }]) {
  id: ID!
  business: Business @hasOne
  buyer: Buyer @hasOne
  #order_status: PurchaseStatus @hasOne
  #placedAt: AWSDateTime
  #completedAt: AWSDateTime
}

type Salesrep @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  title: String
  email: AWSEmail!
  phone: AWSPhone!
  #businesses: [Business] @hasMany(indexName: "bySalesrep", fields: ["id"])
  businesses: [Business] @manyToMany(relationName: "BusinessSalesreps")
  type: String
    @default(value: "Salesrep")
    @index(
      name: "listSalesrepsByName",
      queryField: "listSalesrepsByName"
      sortKeyFields: ["name"]
    )
}

type Industry @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  description: String
  businesses: [Business] @manyToMany(relationName: "BusinessIndustries")
  categories: [Category] @manyToMany(relationName: "IndustryCategories")
}

type Address @model @auth(rules: [{ allow: private }]) {
  id: ID!
  street: String!
  city: String!
  state: String!
  postal_code: String!
  country: String!
  is_default: Boolean
  business_id: ID @index(name: "byBusiness")
  business: Business @belongsTo(fields: ["business_id"])
}

# FIXME: use ParameterStore?
type Bank @model @auth(rules: [{ allow: private }]) {
  id: ID!
# FIXME - need name?
#  name: String!
  account_name: String!
  account_number: String!
  routing_number: String!
  is_default: Boolean
  business_id: ID @index(name: "byBusiness")
  business: Business @belongsTo(fields: ["business_id"])
}

type Business @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  description: String
  #salesrep_id: ID @index(name: "bySalesrep")
  #salesrep: Salesrep @belongsTo(fields: ["salesrep_id"])
  salesreps: [Salesrep] @manyToMany(relationName: "BusinessSalesreps")
  industries: [Industry] @manyToMany(relationName: "BusinessIndustries")
  addresses: [Address] @hasMany(indexName: "byBusiness", fields: ["id"])
  banks: [Bank] @hasMany(indexName: "byBusiness", fields: ["id"])
  buyers: [Buyer] @hasMany(indexName: "byBusiness", fields: ["id"])
}

type Buyer @model @auth(rules: [{ allow: private }]) {
  id: ID!
  first_name: String!
  last_name: String!
  user_name: String!
  last_login: AWSDateTime
  is_owner: Boolean!
  email: AWSEmail!
  phone: AWSPhone!
  business_id: ID @index(name: "byBusiness")
  business: Business @belongsTo(fields: ["business_id"])
}

enum ApplicationStatusEnum {
  pending
  approved
  denied
}

type Application @model @auth(rules: [{ allow: private }]) {
  id: ID!
  # @belongsTo Buyer?
  #userProfileId: ID! #User's Sub so we can locate the user
  status: String #pending, approved, denied
  business_name: String!
  street: String!
  city: String!
  state: String!
  postal_code: String!
  country: String!
  account_name: String!
  account_number: String!
  routing_number: String!
}

type Blurb @model @auth(rules: [{ allow: private }]) {
  id: ID!
  title: String!
  description: String!
  start_date: AWSDateTime!
  end_date: AWSDateTime!
}


# use Buyer?
## TO support additional information about the user
#type UserProfile @model @auth(rules: [{ allow: owner }]) {
#  PK: ID! @primaryKey # COGNITO_USER_SUB
#  SK: ID @index # Business ID... or something else?
#  profile: String
#}
